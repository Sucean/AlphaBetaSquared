<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>README.html</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>

</head>

<body>

<h1 id="alpha-beta¬≤-plotter">Alpha-Beta¬≤ Plotter</h1>
<h2 id="a-modern-framework-for-crystallite-size-distribution-analysis">A
Modern Framework for Crystallite Size Distribution Analysis</h2>
<p>This project provides an open-source, user-friendly implementation of
the established Œ±-Œ≤¬≤ method for analyzing crystallite size
distributions, originally developed by <em>Eberl et al.¬†(1998)</em>. We
hope to encourage with this easy-to-use framework other people to
further expand the knowledge of controlling factors in crystallite
growth.</p>
<h3 id="key-features">Key Features</h3>
<ul>
<li>üöÄ <strong>Modern implementation</strong> in Python (replacing
legacy software)<br />
</li>
<li>üîç <strong>Intuitive workflows</strong> for crystallite size
distribution analysis of big datasets<br />
</li>
<li>üìä <strong>Built-in visualization</strong> of particle size
distributions and Alpha-Beta¬≤ plots<br />
</li>
<li>üìÇ <strong>CSV Format supported</strong> for loading and exporting
data</li>
</ul>
<figure>
<img src="./images/alphabetasquaredplot.png"
alt="Example of an Œ±-Œ≤¬≤ plot of multiple sets of data" />
<figcaption aria-hidden="true">Example of an Œ±-Œ≤¬≤ plot of multiple sets
of data</figcaption>
</figure>
<hr />
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#installation">Installation</a><br />
</li>
<li><a href="#usage">Usage</a>
<ul>
<li><a href="#loading-data">Loading Data</a><br />
</li>
<li><a href="#plotting-data">Plotting Data</a><br />
</li>
<li><a href="#export-data">Export Data</a><br />
</li>
</ul></li>
<li><a href="#license">License</a><br />
</li>
<li><a href="#references">References</a></li>
</ul>
<hr />
<h2 id="installation">Installation</h2>
<h3 id="requirements">Requirements</h3>
<table>
<thead>
<tr class="header">
<th>Package</th>
<th>Version</th>
<th>Installation Command</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Python</td>
<td>‚â•3.8</td>
<td><code>conda install python=3.9.2</code></td>
</tr>
<tr class="even">
<td>NumPy</td>
<td>1.23.x</td>
<td><code>pip install numpy==1.23.4</code></td>
</tr>
<tr class="odd">
<td>SciPy</td>
<td>1.9.x</td>
<td><code>pip install scipy==1.9.1</code></td>
</tr>
<tr class="even">
<td>Matplotlib</td>
<td>3.6.x</td>
<td><code>pip install matplotlib==3.6.2</code></td>
</tr>
<tr class="odd">
<td>Pandas</td>
<td>2.1.x</td>
<td><code>pip install pandas==2.1.4</code></td>
</tr>
</tbody>
</table>
<p><strong>For exact reproduction:</strong></p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install <span class="at">-r</span> requirements.txt  <span class="co"># uses pinned versions</span></span></code></pre></div>
<h3 id="option-1-clone-repository-development-setup">Option 1: Clone
Repository (Development Setup)</h3>
<p>For local development or to use as a Python package in your
environment:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> clone https://github.com/sucean/alphabetasquared.git</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> alphabetasquared</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install <span class="at">-e</span> .</span></code></pre></div>
<h3 id="option-2-install-via-pip-production-use">Option 2: Install via
pip (Production Use)</h3>
<div class="sourceCode" id="cb3"><pre
class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install git+https://github.com/sucean/alphabetasquared.git</span></code></pre></div>
<hr />
<h2 id="usage">Usage</h2>
<p>First import the package into your prefered Python environment:</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> alphabetasquared <span class="im">import</span> AlphaBetaSquared</span></code></pre></div>
<h3 id="loading-data">Loading Data</h3>
<p>Currently only the import of CSV files is supported.<br />
<strong>Important:</strong> Use utf-8 encoding for the CSV files!<br />
Each CSV file should contain a dataset of particles sizes [nm] with a
Column name for each subsample like:</p>
<table>
<thead>
<tr class="header">
<th>Ex-1</th>
<th>Ex-2</th>
<th>Ex-3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2.3</td>
<td>4.2</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>8.0</td>
<td>0.8</td>
<td>8.2</td>
</tr>
<tr class="odd">
<td>‚Ä¶</td>
<td>‚Ä¶</td>
<td>‚Ä¶</td>
</tr>
</tbody>
</table>
<p>The data can be loaded during initialization of the object, either as
multiple <em>*args</em> or as a <em>list</em>.</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># using multiple *args</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span> <span class="op">=</span> AlphaBetaSquared(<span class="st">&quot;data/Example-1.csv&quot;</span>, <span class="st">&quot;data/Example-2.csv&quot;</span>, <span class="st">&quot;Example-without-folder.csv&quot;</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># using a list</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> a_list <span class="op">=</span> [<span class="st">&quot;data/Example-1.csv&quot;</span>, <span class="st">&quot;data/Example-2.csv&quot;</span>, <span class="st">&quot;Example-without-folder.csv&quot;</span>]</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span> <span class="op">=</span> AlphaBetaSquared(<span class="bu">list</span>)</span></code></pre></div>
<p>All parameter are calculated during initilization besides the size
distributions for performance reasons.</p>
<h3 id="plotting-data">Plotting Data</h3>
<p><strong>Important</strong> If you are using Jupyter Notebook or
similar environments which automaticly display Matplotlib-Plots;<br />
This is temporarily surpressed in our code. If you wish that the plots
are automaticly displayed use:</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.set_auto_display(<span class="va">True</span>)</span></code></pre></div>
<h4 id="plotting-alpha-beta¬≤">Plotting Alpha-Beta¬≤</h4>
<p><strong>Quick Strat:</strong> In the following some easy to use
examples are shown to create an Alpha-Beta¬≤ Plot from your data:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Create a new object and load the data</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span> <span class="op">=</span> AlphaBetaSquared(<span class="st">&quot;data/Example-1.csv&quot;</span>, <span class="st">&quot;data/Example-2.csv&quot;</span>, <span class="st">&quot;Example-without-folder.csv&quot;</span>)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Plot all available samples</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_alphabeta()</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.show()  <span class="co"># or if you imported matplotlib.pyplot as plt you also can use plt.show()</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co"># To plot only specific datasets:</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_alphabeta(<span class="st">&quot;Example-1&quot;</span>, <span class="st">&quot;Example-2&quot;</span>)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.show()</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Additionally the figure can be scaled automaticly with:</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.set_alphabeta_scale(<span class="va">True</span>)</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_alphabeta()</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="co"># To automaticly save the plots:</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.set_save_plot(<span class="va">True</span>)</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_alphabeta()</span></code></pre></div>
<p><strong>Advanced Users:</strong> The method also returns the Pyplot
Figure object if the Auto-Display is turned off (standard):</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Return the Alpha-Beta¬≤ figure+axes and operate on it:</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> fig, ax <span class="op">=</span> <span class="bu">abs</span>.plot_alphabeta()</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> ax.set_xlim(<span class="dv">0</span>,<span class="dv">4</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> ax.set_ylim(<span class="dv">0</span>,<span class="fl">0.4</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> text <span class="kw">in</span> ax.texts:</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        text.remove()</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> plt.show()</span></code></pre></div>
<h4 id="plotting-particle-size-distributions">Plotting Particle Size
Distributions:</h4>
<p><strong>Quick start:</strong> The Particle Size Distribution for the
seperate samples of your dataset can also easily be plotted after
loading the data.<br />
If the particle size distribution was not calculate beforehand, the
plotting method will take care of that. Each dataset will be its own
figure<br />
with the various samples correspondingly as subplots within this
figure.</p>
<p><strong>Note:</strong> For the approximation of the distribution only
Log-Normal Functions are currently support since these is the most
common case.</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Plot all particle size distribution of all samples and all datasets:</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_distribution()</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.show()</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co"># For saving data:</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.set_save_plot(<span class="va">True</span>)</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_distribution()</span></code></pre></div>
<p>To plot specific datasets and/or samples you can use a <em>dict</em>
as an argument:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Plot specific data:</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> plot_dict <span class="op">=</span> {</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;Example-1&quot;</span> : [<span class="st">&quot;Ex-1&quot;</span>, <span class="st">&quot;Ex-3&quot;</span>], </span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;Example-2&quot;</span> : <span class="st">&quot;&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>                 }</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.plot_distribution(plot_dict)</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">abs</span>.show()</span></code></pre></div>
<p>The <em>keys</em> of the dict have to be the names of valid datasets.
If the value of the <em>dict</em> is empty (‚Äú‚Äú), the size
distribution<br />
of all samples will be plotted (Example-2). If the value is a list
(Example-1) of valid samples within the corresponding dataset,<br />
only the particle size distribution of these samples will be
plotted.</p>
<p><strong>Advanced Users:</strong> The method returns a list of
figures, containing the figure for each dataset:</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Return a list of figures from the method:</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>figures <span class="op">=</span> <span class="bu">abs</span>.plot_distribution()</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co"># Operate on the first figure, changing the x_label.</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>axes <span class="op">=</span> figures[<span class="dv">0</span>].get_axes()</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> ax <span class="kw">in</span> axes:</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    ax.set_xlabel(<span class="st">&quot;Size [nm]&quot;</span>)</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="bu">abs</span>.show()</span></code></pre></div>
<h3 id="export-data">Export Data:</h3>
<p><strong>Quick start:</strong> Most of the data is calculated during
initilization and can be exported as:</p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Return a list of figures from the method:</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="bu">abs</span> <span class="op">=</span> AlphaBetaSquared(<span class="st">&quot;data/Example-1.csv&quot;</span>, <span class="st">&quot;data/Example-2.csv&quot;</span>, <span class="st">&quot;Example-without-folder.csv&quot;</span>)</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="bu">abs</span>.export_data()</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co"># For exporting single attributes:</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="bu">abs</span>.export_data(<span class="st">&#39;alpha&#39;</span>)</span></code></pre></div>
<p>For performance reasons the size distributions are not calculated at
start.<br />
They have to be calculated seperatedly before beeing exported:</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co"># The size distribution is not calculated auotmaticly for performance reasons:</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="bu">abs</span>.calc_distribution()</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="bu">abs</span>.export_data(<span class="st">&#39;size_distribution&#39;</span>)</span></code></pre></div>
<h2 id="license">License</h2>
<p>Copyright (c) [Year] [Your Name/Institution]</p>
<p>Permission is hereby granted, free of charge, to any person obtaining
a copy<br />
of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to
use,<br />
copy, modify, and distribute the Software <strong>for academic purposes
only</strong>,<br />
subject to the following conditions:</p>
<ol type="1">
<li><p><strong>Non-Commercial Use</strong>:<br />
The Software may not be sold, licensed, or otherwise exploited for
commercial purposes.</p></li>
<li><p><strong>As-Is Liability</strong>:<br />
The Software is provided ‚Äúas is‚Äù, without warranty of any kind. The
authors<br />
shall not be held liable for any damages arising from its use.</p></li>
<li><p><strong>Attribution</strong>:<br />
Any academic publications using this Software must cite:<br />
&gt; [Your Publication Reference]</p></li>
<li><p><strong>Redistribution</strong>:<br />
Modified versions must retain this license and disclose
changes.</p></li>
</ol>
<p><strong>Commercial use requires separate written permission</strong>
from the copyright holders.</p>
<h2 id="references">References</h2>
<p><strong>Eberl, D. D., Drits, V. A., &amp; ≈örodo≈Ñ, J.</strong> (1998).
Deducing growth mechanisms for minerals from the shapes of crystal size
distributions. <em>American Journal of Science, 298</em>(6), 499‚Äì533. <a
href="https://doi.org/10.2475/ajs.298.6.499">https://doi.org/10.2475/ajs.298.6.499</a></p>

</body>
</html>
